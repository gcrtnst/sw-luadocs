head Player
body Returns a table containing info on all connected players.
code PLAYER_LIST = server.getPlayers()
code 
.... 	PLAYER_LIST |
.... 	{ [peer_index] = { ["id"] = peer_id, ["name"] = name, ["admin"] = is_admin, ["auth"] = is_auth, ["steam_id"] = steam_id }}
.... 
body Returns the player name of the specified peer as it appears to the server.
code name, is_success = server.getPlayerName(peer_id)
body Gets the world position of a specified peer as a matrix.
code transform_matrix, is_success = server.getPlayerPos(peer_id)
body Teleports the specified player to the target world position.
code is_success = server.setPlayerPos(peer_id, transform_matrix)
body Returns the forward vector of the specified player's camera
code x, y, z, is_success = server.getPlayerLookDirection(peer_id)
head Objects
body All dynamic objects in Stormworks have an object ID, Player characters have ownership of a dynamic object that can be manipulated with the following functions just like any NPC or physics object. Please note that peer_id and object_id are separate systems; the following function can convert from peer id to object id to allow manipulation of player characters.
body Get a specified player's character object id.
code object_id, is_success = server.getPlayerCharacterID(peer_id)
body Spawn the specified object at the specified world position.
code object_id, is_success = server.spawnObject(transform_matrix, OBJECT_TYPE)
code 
.... 	OBJECT_TYPE |
.... 	0 = none,
.... 	1 = character,
.... 	2 = crate_small,
.... 	3 = collectable, (Not spawnable)
.... 	4 = basketball,
.... 	5 = television,
.... 	6 = barrel,
.... 	7 = schematic,  (Not spawnable)
.... 	8 = debris,  (Not spawnable)
.... 	9 = chair,
.... 	10 = trolley_food,
.... 	11 = trolley_med,
.... 	12 = clothing,  (Not spawnable)
.... 	13 = office_chair,
.... 	14 = book,
.... 	15 = bottle,
.... 	16 = fryingpan,
.... 	17 = mug,
.... 	18 = saucepan,
.... 	19 = stool,
.... 	20 = telescope,
.... 	21 = log,
.... 	22 = bin,
.... 	23 = book_2,
.... 	24 = loot,
.... 	25 = blue_barrel,
.... 	26 = buoyancy_ring,
.... 	27 = container,
.... 	28 = gas_canister,
.... 	29 = pallet,
.... 	30 = storage_bin,
.... 	31 = fire_extinguisher,
.... 	32 = trolley_tool,
.... 	33 = cafetiere,
.... 	34 = drawers_tools,
.... 	35 = glass,
.... 	36 = microwave,
.... 	37 = plate,
.... 	38 = box_closed,
.... 	39 = box_open,
.... 	40 = desk_lamp,
.... 	41 = eraser_board,
.... 	42 = folder,
.... 	43 = funnel,
.... 	44 = lamp,
.... 	45 = microscope,
.... 	46 = notebook,
.... 	47 = pen_marker,
.... 	48 = pencil,
.... 	49 = scales,
.... 	50 = science_beaker,
.... 	51 = science_cylinder,
.... 	52 = science_flask,
.... 	53 = tub_1,
.... 	54 = tub_2,
.... 	55 = filestack,
.... 	56 = barrel_toxic,
.... 	57 = flare,
.... 	58 = fire,
.... 	59 = animal,
.... 	60 = map_label,  (Not spawnable)
.... 	61 = iceberg,  (Not spawnable)
.... 	62 = gun_flare,
.... 	63 = vehicle_flare,
.... 	64 = ammo_shell,
.... 	65 = binoculars,
.... 	66 = C4,
.... 	67 = grenade,
.... 	68 = vehicle_flare,
.... 	69 = coal,
.... 	70 = meteorite,
.... 	71 = glowstick,
.... 
body Spawn a world fire at the specified world position matrix. parent_vehicle_id should be 0 if the fire should not move relative to a vehicle. Fires will slowly grow until they reach 1 magnitude.
code object_id, is_success = server.spawnFire(transform_matrix, fire_size, fire_magnitude, is_lit, is_explosive, parent_vehicle_id, explosion_magnitude)
body Spawn a character object with an optional outfit at the specified world postion.
code object_id, is_success = server.spawnCharacter(transform_matrix, (OUTFIT_TYPE))
code 
.... 	OUTFIT_TYPE |
.... 	0 = none,
.... 	1 = worker,
.... 	2 = fishing,
.... 	3 = waiter,
.... 	4 = swimsuit,
.... 	5 = military,
.... 	6 = office,
.... 	7 = police,
.... 	8 = science,
.... 	9 = medical,
.... 	10 = wetsuit,
.... 	11 = civilian
body Spawn an animal at the specified world postion.
code object_id, is_success = server.spawnAnimal(transform_matrix, ANIMAL_TYPE, size_multiplier)
code 
.... 	ANIMAL_TYPE |
.... 	0 = shark,
.... 	1 = whale,
.... 	2 = seal,
.... 	3 = penguin
body Despawn the specified object when it is out of a player's range. is_instant will instantly despawn the object.
code is_success = server.despawnObject(object_id, is_instant)
body Get the world position of a specified object. is_success returns false if the object cannot be found.
code transform_matrix, is_success = server.getObjectPos(object_id)
body Get the simulating state of a specified object. is_success returns false if the object cannot be found.
code is_simulating, is_success = server.getObjectSimulating(object_id)
body Set the world position of a specified object. is_success returns false if the object cannot be found.
code is_success = server.setObjectPos(object_id, transform_matrix)
body Set data for an existing world fire using its object_id.
code server.setFireData(object_id, is_lit, is_explosive)
body Get data for a world fire using its object_id.
code is_lit, is_success = server.getFireData(object_id)
body Kills the target character.
code server.killCharacter(object_id)
body Revives the target character.
code server.reviveCharacter(object_id)
body Sets the target character to be seated in the first seat with the specified name found on the specified vehicle.
code server.setCharacterSeated(object_id, vehicle_id, seat_name)
body Sets the target character to be seated in the seat with the specified voxel position found on the specified vehicle.
code server.setCharacterSeated(object_id, vehicle_id, x, y, z)
body Get character data for a specified character object. Returns a table if successful and nil upon failure.
code {["hp"] = hp, ["incapacitated"] = is_incapacitated, ["dead"] = is_dead, ["interactable"] = is_interactable, ["ai"] = is_ai, ["name"] = name} = server.getCharacterData(object_id)
body Get the current vehicle_id for a specified character object.
code vehicle_id, is_success = server.getCharacterVehicle(object_id)
body Set character data for a specified character object. Non-interactable characters are frozen in place and cannot be moved. is_interactable has no effect on Player characters.
code server.setCharacterData(object_id, hp, is_interactable, is_ai)
body Set the item slot data for a specified character object. Certain equipments hold data that can be initialized as detailed below.
code is_success = server.setCharacterItem(object_id, SLOT_NUMBER, EQUIPMENT_ID, is_active, [integer_value], [float_value])
code 
.... 	SLOT_NUMBER |
.... 	1 = Large Equipment Slot, 
.... 	2, 3, 4, 5 = Small Equipment Slot, 
.... 	6 = Outfit Slot
code 
.... 	EQUIPMENT_ID |
.... Outfits
.... 	0 = none,
.... 	1 = diving,
.... 	2 = firefighter,
.... 	3 = scuba,
.... 	4 = parachute, [int = {0 = deployed, 1 = ready}]
.... 	5 = arctic,
.... 	29 = hazmat,
.... 	73 = bomb_disposal,
.... 	74 = chest_rig,
.... 	75 = black_hawk_vest
.... 	76 = plate_vest,
.... 	77 = armor_vest,
.... Items
.... 	6 = binoculars,
.... 	7 = cable,
.... 	8 = compass,
.... 	9 = defibrillator, [int = charges]
.... 	10 = fire_extinguisher, [float = ammo]
.... 	11 = first_aid, [int = charges]
.... 	12 = flare, [int = charges]
.... 	13 = flaregun, [int = ammo]
.... 	14 = flaregun_ammo, [int = ammo]
.... 	15 = flashlight, [float = battery]
.... 	16 = hose, [int = {0 = hose off, 1 = hose on}]
.... 	17 = night_vision_binoculars, [float = battery]
.... 	18 = oxygen_mask, [float = oxygen]
.... 	19 = radio, [int = channel] [float = battery]
.... 	20 = radio_signal_locator, [float = battery]
.... 	21 = remote_control, [int = channel] [float = battery]
.... 	22 = rope,
.... 	23 = strobe_light, [int = {0 = off, 1 = on}] [float = battery]
.... 	24 = strobe_light_infrared, [int = {0 = off, 1 = on}] [float = battery]
.... 	25 = transponder, [int = {0 = off, 1 = on}] [float = battery]
.... 	26 = underwater_welding_torch, [float = charge]
.... 	27 = welding_torch, [float = charge]
.... 	28 = coal,
.... 	30 = radiation_detector, [float = battery]
.... 	31 = c4, [int = ammo]
.... 	32 = c4_detonator,
.... 	33 = speargun, [int = ammo]
.... 	34 = speargun_ammo,
.... 	35 = pistol, [int = ammo]
.... 	36 = pistol_ammo,
.... 	37 = smg, [int = ammo]
.... 	38 = smg_ammo,
.... 	39 = rifle, [int = ammo]
.... 	40 = rifle_ammo,
.... 	41 = grenade, [int = ammo]
.... 	42 = machine_gun_ammo_box_k,
.... 	43 = machine_gun_ammo_box_he,
.... 	44 = machine_gun_ammo_box_he_frag,
.... 	45 = machine_gun_ammo_box_ap,
.... 	46 = machine_gun_ammo_box_i,
.... 	47 = light_auto_ammo_box_k,
.... 	48 = light_auto_ammo_box_he,
.... 	49 = light_auto_ammo_box_he_frag,
.... 	50 = light_auto_ammo_box_ap,
.... 	51 = light_auto_ammo_box_i,
.... 	52 = rotary_auto_ammo_box_k,
.... 	53 = rotary_auto_ammo_box_he,
.... 	54 = rotary_auto_ammo_box_he_frag,
.... 	55 = rotary_auto_ammo_box_ap,
.... 	56 = rotary_auto_ammo_box_i,
.... 	57 = heavy_auto_ammo_box_k,
.... 	58 = heavy_auto_ammo_box_he,
.... 	59 = heavy_auto_ammo_box_he_frag,
.... 	60 = heavy_auto_ammo_box_ap,
.... 	61 = heavy_auto_ammo_box_i,
.... 	62 = battle_shell_k,
.... 	63 = battle_shell_he,
.... 	64 = battle_shell_he_frag,
.... 	65 = battle_shell_ap,
.... 	66 = battle_shell_i,
.... 	67 = artillery_shell_k,
.... 	68 = artillery_shell_he,
.... 	69 = artillery_shell_he_frag,
.... 	70 = artillery_shell_ap,
.... 	71 = artillery_shell_i,
.... 	72 = chemlight,
.... 
body Get the item in the specified slot for a specified character object.
code EQUIPMENT_ID, is_success = server.getCharacterItem(object_id, SLOT_NUMBER)
